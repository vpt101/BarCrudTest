/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.brclys.thct.openApiGenSrc.api;

import com.brclys.thct.openApiGenSrc.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-29T12:22:03.964972322+01:00[Europe/London]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "account", description = "Manage a bank account")
public interface V1Api {

    default V1ApiDelegate getDelegate() {
        return new V1ApiDelegate() {};
    }

    /**
     * POST /v1/accounts
     * Create a new bank account
     *
     * @param createBankAccountRequest Create a new bank account for the user (required)
     * @return Bank Account has been created successfully (status code 201)
     *         or Invalid details supplied (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "createAccount",
        description = "Create a new bank account",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Bank Account has been created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid details supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the transaction", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BankAccountResponse> createAccount(
        @Parameter(name = "CreateBankAccountRequest", description = "Create a new bank account for the user", required = true) @Valid @RequestBody CreateBankAccountRequest createBankAccountRequest
    ) {
        return getDelegate().createAccount(createBankAccountRequest);
    }


    /**
     * POST /v1/accounts/{accountNumber}/transactions
     * Create a transaction
     *
     * @param accountNumber Account number of the bank account (required)
     * @param createTransactionRequest Create a new transaction (required)
     * @return Transaction has been created successfully (status code 201)
     *         or Invalid details supplied (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to delete the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or Insufficient funds to process transaction (status code 422)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "createTransaction",
        description = "Create a transaction",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Transaction has been created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid details supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to delete the bank account details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bank account was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "422", description = "Insufficient funds to process transaction", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/accounts/{accountNumber}/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TransactionResponse> createTransaction(
        @Pattern(regexp = "^01\\d{6}$") @Parameter(name = "accountNumber", description = "Account number of the bank account", required = true, in = ParameterIn.PATH) @PathVariable("accountNumber") String accountNumber,
        @Parameter(name = "CreateTransactionRequest", description = "Create a new transaction", required = true) @Valid @RequestBody CreateTransactionRequest createTransactionRequest
    ) {
        return getDelegate().createTransaction(accountNumber, createTransactionRequest);
    }


    /**
     * POST /v1/users
     * Create a new user
     *
     * @param createUserRequest Create a new user (required)
     * @return User has been created successfully (status code 201)
     *         or Invalid details supplied (status code 400)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "createUser",
        description = "Create a new user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User has been created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid details supplied"),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> createUser(
        @Parameter(name = "CreateUserRequest", description = "Create a new user", required = true) @Valid @RequestBody CreateUserRequest createUserRequest
    ) {
        return getDelegate().createUser(createUserRequest);
    }


    /**
     * DELETE /v1/accounts/{accountNumber}
     * Delete account by account number.
     *
     * @param accountNumber Account number of the bank account (required)
     * @return The bank account has been deleted (status code 204)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to delete the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "deleteAccountByAccountNumber",
        description = "Delete account by account number.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The bank account has been deleted"),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to delete the bank account details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bank account was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/accounts/{accountNumber}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteAccountByAccountNumber(
        @Pattern(regexp = "^01\\d{6}$") @Parameter(name = "accountNumber", description = "Account number of the bank account", required = true, in = ParameterIn.PATH) @PathVariable("accountNumber") String accountNumber
    ) {
        return getDelegate().deleteAccountByAccountNumber(accountNumber);
    }


    /**
     * DELETE /v1/users/{userId}
     * Delete user by ID.
     *
     * @param userId ID of the user (required)
     * @return The user has been deleted (status code 204)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or User was not found (status code 404)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or A user cannot be deleted when they are associated with a bank account (status code 409)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "deleteUserByID",
        description = "Delete user by ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The user has been deleted"),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "User was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the transaction", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "A user cannot be deleted when they are associated with a bank account", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/users/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteUserByID(
        @Pattern(regexp = "^usr-[A-Za-z0-9]+$") @Parameter(name = "userId", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return getDelegate().deleteUserByID(userId);
    }


    /**
     * GET /v1/accounts/{accountNumber}
     * Fetch account by account number.
     *
     * @param accountNumber Account number of the bank account (required)
     * @return The bank account details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or The user was not authenticated (status code 401)
     *         or The user is not allowed to access the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "fetchAccountByAccountNumber",
        description = "Fetch account by account number.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The bank account details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The user was not authenticated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the bank account details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bank account was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts/{accountNumber}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BankAccountResponse> fetchAccountByAccountNumber(
        @Pattern(regexp = "^01\\d{6}$") @Parameter(name = "accountNumber", description = "Account number of the bank account", required = true, in = ParameterIn.PATH) @PathVariable("accountNumber") String accountNumber
    ) {
        return getDelegate().fetchAccountByAccountNumber(accountNumber);
    }


    /**
     * GET /v1/accounts/{accountNumber}/transactions/{transactionId}
     * Fetch transaction by ID.
     *
     * @param accountNumber Account number of the bank account (required)
     * @param transactionId ID of the transaction (required)
     * @return The transaction details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "fetchAccountTransactionByID",
        description = "Fetch transaction by ID.",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The transaction details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the transaction", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bank account was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts/{accountNumber}/transactions/{transactionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TransactionResponse> fetchAccountTransactionByID(
        @Pattern(regexp = "^01\\d{6}$") @Parameter(name = "accountNumber", description = "Account number of the bank account", required = true, in = ParameterIn.PATH) @PathVariable("accountNumber") String accountNumber,
        @Pattern(regexp = "^tan-[A-Za-z0-9]$") @Parameter(name = "transactionId", description = "ID of the transaction", required = true, in = ParameterIn.PATH) @PathVariable("transactionId") String transactionId
    ) {
        return getDelegate().fetchAccountTransactionByID(accountNumber, transactionId);
    }


    /**
     * GET /v1/users/{userId}
     * Fetch user by ID.
     *
     * @param userId ID of the user (required)
     * @return The user details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or User was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "fetchUserByID",
        description = "Fetch user by ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The user details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the transaction", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "User was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> fetchUserByID(
        @Pattern(regexp = "^usr-[A-Za-z0-9]+$") @Parameter(name = "userId", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return getDelegate().fetchUserByID(userId);
    }


    /**
     * GET /v1/accounts/{accountNumber}/transactions
     * List transactions
     *
     * @param accountNumber Account number of the bank account (required)
     * @return The list of transaction details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transactions (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "listAccountTransaction",
        description = "List transactions",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of transaction details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListTransactionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the transactions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bank account was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts/{accountNumber}/transactions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListTransactionsResponse> listAccountTransaction(
        @Pattern(regexp = "^01\\d{6}$") @Parameter(name = "accountNumber", description = "Account number of the bank account", required = true, in = ParameterIn.PATH) @PathVariable("accountNumber") String accountNumber
    ) {
        return getDelegate().listAccountTransaction(accountNumber);
    }


    /**
     * GET /v1/accounts
     * List accounts
     *
     * @return The list of bank accounts (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "listAccounts",
        description = "List accounts",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of bank accounts", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListBankAccountsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListBankAccountsResponse> listAccounts(
        
    ) {
        return getDelegate().listAccounts();
    }


    /**
     * PATCH /v1/accounts/{accountNumber}
     * Update account by account number.
     *
     * @param accountNumber Account number of the bank account (required)
     * @param updateBankAccountRequest Update bank account details for the user (required)
     * @return The updated bank account details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to update the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "updateAccountByAccountNumber",
        description = "Update account by account number.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated bank account details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to update the bank account details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Bank account was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/accounts/{accountNumber}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BankAccountResponse> updateAccountByAccountNumber(
        @Pattern(regexp = "^01\\d{6}$") @Parameter(name = "accountNumber", description = "Account number of the bank account", required = true, in = ParameterIn.PATH) @PathVariable("accountNumber") String accountNumber,
        @Parameter(name = "UpdateBankAccountRequest", description = "Update bank account details for the user", required = true) @Valid @RequestBody UpdateBankAccountRequest updateBankAccountRequest
    ) {
        return getDelegate().updateAccountByAccountNumber(accountNumber, updateBankAccountRequest);
    }


    /**
     * PATCH /v1/users/{userId}
     * Update user by ID.
     *
     * @param userId ID of the user (required)
     * @param updateUserRequest Update user details (required)
     * @return The updated user details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or User was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "updateUserByID",
        description = "Update user by ID.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated user details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request didn't supply all the necessary data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user is not allowed to access the transaction", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "User was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Bearer Authentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> updateUserByID(
        @Pattern(regexp = "^usr-[A-Za-z0-9]+$") @Parameter(name = "userId", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "UpdateUserRequest", description = "Update user details", required = true) @Valid @RequestBody UpdateUserRequest updateUserRequest
    ) {
        return getDelegate().updateUserByID(userId, updateUserRequest);
    }

}
